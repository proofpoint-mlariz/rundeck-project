#!/usr/bin/env bash

#/ command: rundeck-project:acls-update: "update existing aclpolicy with new content"
#/ usage: rerun rundeck-project:acls-update [ --file <>] [ --aclpolicy <>]  --project <>  --url <$RUNDECK_URL> [ --username <$RUNDECK_USER>] [ --password <$RUNDECK_PASSWORD>] [ --apikey <$RUNDECK_APIKEY>] 
#/ rerun-variables: RERUN, RERUN_VERSION, RERUN_MODULES, RERUN_MODULE_DIR
#/ option-variables: FILE ACLPOLICY PROJECT URL USERNAME PASSWORD APIKEY


. $RERUN_MODULE_DIR/lib/functions.sh acls-update || { 
  echo >&2 "Failed loading function library." ; exit 1 ; 
}

set -o errexit -o nounset -o pipefail


rerun_options_parse "$@"

#
# Read authentication credentials
#
rundeck_authenticate -u "$URL" -U "$USERNAME" -p "${PASSWORD:-}" -k "${APIKEY:-}"


[[ ! -n "${FILE:-}" ]] && rerun_die 2 "Requires --file <> option"
[[ ! -f $FILE ]] && rerun_die 2 "File not found: $FILE"

POST_CONTENT=$(mktemp -t post.content.XXXXXXXXXX)
cat >$POST_CONTENT <<EOF
<contents><![CDATA[$(< $FILE)]]></contents>
EOF

trap 'rm $POST_CONTENT $CURL_OUT' EXIT; # cleanup on exit

if ! http_code=$(rundeck_curl -w "%{http_code}" --data-binary @$POST_CONTENT \
	-H Content-Type:application/xml \
	-X PUT ${URL}/api/14/project/$PROJECT/acl/$ACLPOLICY)
then
	rerun_die 3 "curl request failed (exit code: $?)"
fi

case ${http_code:-} in
   	20*) : ;; # successful 
   	400) rerun_die "The aclpolicy file failed validation: $FILE." ;;
   	404) rerun_die "An aclpolicy by that name does not exists: $ACLPOLICY." ;;
	* )  rerun_die 3 "API error: PUT ${URL}/api/14/project/$PROJECT/acl/$ACLPOLICY" ;;
esac 


# Done. Exit with last command exit status.
exit $?

