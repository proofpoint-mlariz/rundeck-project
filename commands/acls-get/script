#!/usr/bin/env bash

#/ command: rundeck-project:acls-get: "get aclpolicy file"
#/ usage: rerun rundeck-project:acls-get [ --aclpolicy <>]  --project <>  --url <$RUNDECK_URL> [ --username <$RUNDECK_USER>] [ --password <$RUNDECK_PASSWORD>] [ --apikey <$RUNDECK_APIKEY>] 
#/ rerun-variables: RERUN, RERUN_VERSION, RERUN_MODULES, RERUN_MODULE_DIR
#/ option-variables: ACLPOLICY PROJECT URL USERNAME PASSWORD APIKEY

. $RERUN_MODULE_DIR/lib/functions.sh acls-get || { 
  echo >&2 "Failed loading function library." ; exit 1 ; 
}


set -o errexit -o nounset -o pipefail

rerun_options_parse "$@"


#
# Read authentication credentials
#
if [[ -n "${PASSWORD:-}" && -z "${APIKEY:-}" ]]
then
	COOKIES=$(rundeck_login "$URL" "$USERNAME" "$PASSWORD")
	CURLOPTS="$CURLOPTS -c $COOKIES -b $COOKIES"
elif [[ -z "${PASSWORD:-}" && -n "${APIKEY:-}" ]]; then
	CURLOPTS="$CURLOPTS -H X-Rundeck-Auth-Token:$APIKEY"
else
	rerun_die 2 "Either use --username <> --password <> ...or.. --apikey <>"
fi

CURL_OUT=$(mktemp -t curl.out.XXXXXXXXXX)
trap 'rm $CURL_OUT' EXIT; # cleanup on exit

if ! http_code=$(rundeck_curl -w "%{http_code}" -H "Accept: application/xml" \
	-X GET ${URL}/api/14/project/$PROJECT/acl/$ACLPOLICY -o $CURL_OUT)
then
	rerun_die 3 "curl request failed (exit code: $?)"
fi

case ${http_code:-} in
   	200) : ;; # successful
	* ) rerun_die 3 "API error: ${URL}/api/14/project/$PROJECT/acl/$ACLPOLICY"
esac  

if ! xmlstarlet sel -t -m '/' -v contents -n $CURL_OUT
then
	rerun_die "The ACL policy had no content: $ACLPOLICY"
fi


# Done. Exit with last command exit status.
exit $?

